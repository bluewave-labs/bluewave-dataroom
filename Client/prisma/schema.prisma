generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ArchivedUser {
  id         Int      @id @default(autoincrement())
  user_id    String   @unique @default(cuid())
  first_name String   @default("")
  last_name  String   @default("")
  email      String   @unique @default("")
  password   String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  role       UserRole @default(USER)
  address    String?  @default("")
}

model PasswordResetToken {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  reset_at   DateTime? @db.Timestamptz(6)
  user_id    String
  User       User      @relation(fields: [user_id], references: [user_id])
}

model User {
  id                 Int                  @id @default(autoincrement())
  user_id            String               @unique
  first_name         String               @default("")
  last_name          String               @default("")
  email              String               @unique @default("")
  password           String
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  role               UserRole             @default(ADMIN)
  status             Status
  verification_token String
  token_expires_at   DateTime             @db.Timestamptz(6)
  updated_at         DateTime             @updatedAt @db.Timestamptz(6)
  PasswordResetToken PasswordResetToken[]
  Document           Document[]
  Link               Link[]
}

model Document {
  id          Int      @id @default(autoincrement())
  document_id String   @unique @default(cuid())
  user_id     String
  fileName    String
  filePath    String
  fileType    String
  size        Int
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  User        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  Link        Link[]
}

enum Status {
  ACTIVE
  ARCHIVED
  UNVERIFIED
}

enum UserRole {
  ADMIN
  USER
}

model Link {
  id                Int       @id @default(autoincrement())
  linkId            String    @unique
  documentId        String
  userId            String
  friendlyName      String?   @unique
  linkUrl           String    @unique
  isPublic          Boolean   @default(false)
  password          String? // used for SharingOptions
  expirationTime    DateTime?
  hasSharingOptions Boolean   @default(false)
  updatedAt         DateTime  @updatedAt @db.Timestamptz(6)
  createdAt         DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  Document Document @relation(fields: [documentId], references: [document_id], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  LinkVisitors LinkVisitors[]
}

model LinkVisitors {
  id         Int      @id @default(autoincrement())
  linkId     String
  first_name String
  last_name  String
  email      String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  Link Link @relation(fields: [linkId], references: [linkId], onDelete: Cascade)
}
